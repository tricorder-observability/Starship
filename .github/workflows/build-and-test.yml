name: Bazel build and test

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: read

env:
  # only for build local docker image, but not push
  REGISTRY_SERVER_ADDRESS: localhost

jobs:
  query-changed-src-files:
    name: List changed files
    # This matches the dev_image and base image used in the code base.
    runs-on: ubuntu-22.04
    outputs:
      all: ${{ steps.src-changed.outputs.all_changed_files}}
      any_changed: ${{ steps.src-changed.outputs.any_changed}}
    steps:
      - uses: actions/checkout@v3
        with:
          # Retrieve the preceding commit
          fetch-depth: 0
      - name: Get changed files under src/
        id: src-changed
        uses: tj-actions/changed-files@v35
        with:
          files: src/**
      - name: DEBUG print changed files under src/
        run: |
          echo ${{ steps.src-changed.outputs.all_changed_files }}
          echo ${{ steps.src-changed.outputs.any_changed }}

  build-and-test:
    name: Bazel build and test
    # This matches the dev_image and base image used in the code base.
    runs-on: ubuntu-22.04
    # require the first job to have ran
    needs: query-changed-src-files
    # only run there are changed files
    if: needs.query-changed-src-files.outputs.any_changed == 'true'
    container:
      image: docker.io/tricorderobservability/ci_image:202302140538
      options: --privileged
      volumes:
        # Needed for accessing kernel headers
        # TODO(yzhao): Need to add the ability to install kernel headers.
        - /lib/modules:/lib/modules
        # Needed to access /sys/kernel/tracing/kprobe
        - /sys/kernel:/sys/kernel
        # Needed for accessing kernel headers
        - /usr/src:/usr/src
    steps:
      - uses: actions/checkout@v3
        with:
          # Retrieve the preceding commit
          fetch-depth: 0
      - uses: bazelbuild/setup-bazelisk@v2
      - name: Query affected bazel rules
        id: q
        run: .github/scripts/bazel_ci_query.sh ${{ needs.query-changed-src-files.outputs.all }} >>$GITHUB_OUTPUT
        shell: bash
      - name: DEBUG print changed files under src/ and affected rules
        run: |
          echo ${{ needs.query-changed-src-files.outputs.any_changed }}
          echo ${{ needs.query-changed-src-files.outputs.all }}
          echo ${{ steps.q.outputs.any_affected }}
          echo ${{ steps.q.outputs.all }}
      - name: Bazel build affected rules
        if: steps.q.outputs.any_affected == 'true'
        run: .github/scripts/bazel.sh build ${{ steps.q.outputs.all }}
        shell: bash
      - name: Bazel test affected rules
        if: steps.q.outputs.any_affected == 'true'
        run: .github/scripts/bazel_test.sh ${{ steps.q.outputs.all }}
        shell: bash
      - name: Bazel test affected BPF rules
        if: steps.q.outputs.any_affected == 'true'
        run: .github/scripts/bazel_test.sh --config=bpf --cache_test_results=no ${{ steps.q.outputs.all }}
        shell: bash
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3

  build-and-test-with-host-mount-linux-headers:
    name: Bazel build and test with host mount (for BPF)
    # This matches the dev_image and base image used in the code base.
    runs-on: ubuntu-22.04
    # require the first job to have ran
    needs: query-changed-src-files
    # only run there are changed files
    if: needs.query-changed-src-files.outputs.any_changed == 'true'
    container:
      image: docker.io/tricorderobservability/ci_image:202302140538
      options: --privileged
      volumes:
        # Needed for accessing kernel headers
        - /:/host:ro
        # Needed to access /sys/kernel/tracing/kprobe
        - /sys/kernel:/sys/kernel
    steps:
      - uses: actions/checkout@v3
        with:
          # Retrieve the preceding commit
          fetch-depth: 0
      - uses: bazelbuild/setup-bazelisk@v2
      - name: Query affected bazel rules
        id: q
        run: .github/scripts/bazel_ci_query.sh ${{ needs.query-changed-src-files.outputs.all }} >>$GITHUB_OUTPUT
        shell: bash
      - name: DEBUG print changed files under src/ and affected rules
        run: |
          echo ${{ needs.query-changed-src-files.outputs.any_changed }}
          echo ${{ needs.query-changed-src-files.outputs.all }}
          echo ${{ steps.q.outputs.any_affected }}
          echo ${{ steps.q.outputs.all }}
      - name: Bazel test affected BPF rules
        if: steps.q.outputs.any_affected == 'true'
        # Need to --cache_test_results=no because bazel has been cache last result
        run: .github/scripts/bazel_test.sh test --config=github-actions --flaky_test_attempts=3 --config=bpf --cache_test_results=no ${{ steps.q.outputs.all }}
        shell: bash

  build-and-test-with-merged-linux-headers:
    name: Bazel build and test with no host mount (for BPF)
    # This matches the dev_image and base image used in the code base.
    runs-on: ubuntu-22.04
    # require the first job to have ran
    needs: query-changed-src-files
    # only run there are changed files
    if: needs.query-changed-src-files.outputs.any_changed == 'true'
    container:
      image: docker.io/tricorderobservability/ci_image:202302140538
      options: --privileged
      volumes:
        # Needed to access /sys/kernel/tracing/kprobe
        - /sys/kernel:/sys/kernel
        # Needed to access ubuntu /boot/config-$(uname -r)
        - /boot:/host/boot:ro
    steps:
      - uses: actions/checkout@v3
        with:
          # Retrieve the preceding commit
          fetch-depth: 0
      - uses: bazelbuild/setup-bazelisk@v2
      - name: Query affected bazel rules
        id: q
        run: .github/scripts/bazel_ci_query.sh ${{ needs.query-changed-src-files.outputs.all }} >>$GITHUB_OUTPUT
        shell: bash
      - name: DEBUG print changed files under src/ and affected rules
        run: |
          echo ${{ needs.query-changed-src-files.outputs.any_changed }}
          echo ${{ needs.query-changed-src-files.outputs.all }}
          echo ${{ steps.q.outputs.any_affected }}
          echo ${{ steps.q.outputs.all }}
      - name: Bazel test affected BPF rules
        if: steps.q.outputs.any_affected == 'true'
        run: .github/scripts/bazel_test.sh test --config=github-actions --flaky_test_attempts=3 --config=bpf --cache_test_results=no ${{ steps.q.outputs.all }}
        shell: bash

  build-api-server-images:
    runs-on: ubuntu-latest
    container:
      image: docker.io/tricorderobservability/ci_image:202302140538
    timeout-minutes: 90
    needs: build-and-test
    # Disable image building for PRs. We do not seem need this for now.
    if: false
    env:
      TAG: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v3
      - uses: bazelbuild/setup-bazelisk@v2
      - name: Build api-server image
        run: bazel run --define=TAG=${TAG} --define=REGISTRY=${REGISTRY_SERVER_ADDRESS} //src/api-server/cmd:api-server_image
        working-directory: .
  
  build-agent-images:
    runs-on: ubuntu-latest
    container:
      image: docker.io/tricorderobservability/ci_image:202302140538
    timeout-minutes: 90
    needs: build-and-test
    # Disable image building for PRs.
    if: false
    env:
      TAG: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v3
      - uses: bazelbuild/setup-bazelisk@v2
      - name: Build agent image
        run: bazel run --define=TAG=${TAG} --define=REGISTRY=${REGISTRY_SERVER_ADDRESS} //src/agent/cmd:agent_image
        working-directory: .

  build-ui-images:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: build-and-test
    # Disable image building for PRs.
    if: false
    env:
      TAG: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v3
      # build ui image
      - name: Set Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - name: Run yarn install
        uses: borales/actions-yarn@v4
        with:
          cmd: install # will run `yarn install` command
          dir: "ui"
      - name: Build production bundle
        uses: borales/actions-yarn@v4
        with:
          cmd: run build # will run `yarn run build` command
          dir: "ui"
      - name: Build mgmt-ui image
        uses: docker/build-push-action@v4
        with:
          push: false
          file: ./ui/docker/Dockerfile
          context: ./ui
          tags: ${{ env.REGISTRY_SERVER_ADDRESS }}/mgmt-ui:${{ env.TAG }}
