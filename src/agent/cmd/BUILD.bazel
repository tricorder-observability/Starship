load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library", "go_test")
load("@rules_pkg//:pkg.bzl", "pkg_tar")
load("//:bazel/container_image.bzl", "container_image", "container_push", "go_image")

go_library(
    name = "cmd_lib",
    srcs = ["main.go"],
    importpath = "github.com/tricorder/src/agent/cmd",
    visibility = ["//visibility:private"],
    deps = [
        "//src/agent/deployer",
        "//src/agent/ebpf/bcc/linux_headers",
        "//src/agent/ebpf/bcc/utils",
        "//src/agent/proc_info",
        "//src/utils/log",
        "//src/utils/pg",
        "//src/utils/retry",
        "//src/utils/sys",
    ],
)

go_test(
    name = "cmd_test",
    srcs = ["agent_image_test.go"],
    data = [":agent_image.tar"],
    embed = [":cmd_lib"],
    deps = [
        "//src/testing/bazel",
        "//src/testing/docker",
        "@com_github_stretchr_testify//assert",
    ],
)

go_binary(
    name = "agent",
    embed = [":cmd_lib"],
    visibility = ["//visibility:public"],
)

go_image(
    name = "agent_base_image",
    binary = ":agent",
)

container_image(
    name = "agent_image",
    base = ":agent_base_image",
    tars = ["@download_linux_headers_from_s3_url//file"],
)

container_push(
    name = "push_agent_image",
    format = "Docker",
    image = ":agent_image",
    # Need to login with docker first
    # aws ecr-public get-login-password --region us-east-1 |\
    #     docker login --username AWS --password-stdin public.ecr.aws/tricorder
    # aws ecr-public create-repository --repository-name agent
    # Use bazel run --define=REGISTRY=ghcr.io/tricorder-observability to set this value.
    registry = "$(REGISTRY)",
    repository = "agent",
    # Use bazel run --define=TAG=v0.0.x to set this value.
    tag = "$(TAG)",
)
