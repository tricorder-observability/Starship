load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library", "go_test")
load("//:bazel/container_image.bzl", "container_image", "container_push", "go_image", "pkg_tar")

go_library(
    name = "cmd_lib",
    srcs = ["main.go"],
    importpath = "github.com/tricorder/src/api-server/cmd",
    visibility = ["//visibility:private"],
    deps = [
        "//src/api-server/grpc",
        "//src/api-server/http",
        "//src/api-server/http/dao",
        "//src/api-server/http/docs",
        "//src/api-server/meta",
        "//src/utils/cond",
        "//src/utils/errors",
        "//src/utils/grpc",
        "//src/utils/lock",
        "//src/utils/log",
        "//src/utils/pg",
        "//src/utils/retry",
        "@io_k8s_client_go//kubernetes",
        "@io_k8s_sigs_controller_runtime//:controller-runtime",
        "@org_golang_x_sync//errgroup",
    ],
)

go_binary(
    name = "api-server",
    embed = [":cmd_lib"],
    static = "on",
    visibility = ["//visibility:public"],
)

# This is to extract the tar, and then let the wasi_sdk_tar to repackage into
# a different directory structure.
genrule(
    name = "extract_wasi_sdk",
    srcs = ["@download_wasi_sdk_from_github_url//file"],
    outs = ["wasi-sdk-19.0"],
    # --no-same-owner is required when building inside docker container.
    # See https://superuser.com/a/1435438
    # @D refers to bazel's output directory
    # See https://bazel.build/reference/be/make-variables
    cmd = "tar -C $(@D) -xf $(location @download_wasi_sdk_from_github_url//file) --no-same-owner",
    visibility = ["//visibility:public"],
)

# Repackage wasi sdk into a different directory.
pkg_tar(
    name = "wasi_sdk_tar",
    srcs = [":extract_wasi_sdk"],
    package_dir = "/opt/tricorder/wasm",
    # This symlink matches the setup in
    # devops/dev_image/install.yaml (search `tags: wasi-sdk`)
    symlinks = {"/opt/tricorder/wasm/wasi-sdk": "/opt/tricorder/wasm/wasi-sdk-19.0"},
)

pkg_tar(
    name = "wasm_common_includes",
    srcs = ["//modules/common:wasm_common_includes"],
    package_dir = "/opt/tricorder/wasm/include",
)

go_image(
    name = "api-server_base_image",
    binary = ":api-server",
)

pkg_tar(
    name = "tricorder_db_tar",
    srcs = ["//src/api-server/http:tricorder_db"],
    mode = "0644",
    package_dir = "/tricorder/http",
)

container_image(
    name = "api-server_image",
    base = ":api-server_base_image",
    tars = [
        ":tricorder_db_tar",
        ":wasi_sdk_tar",
        ":wasm_common_includes"
    ],
)

go_test(
    name = "cmd_test",
    srcs = ["api_server_image_test.go"],
    data = [":api-server_image.tar"],
    embed = [":cmd_lib"],
    deps = [
        "//src/testing/bazel",
        "//src/testing/docker",
        "@com_github_stretchr_testify//assert",
    ],
)

container_push(
    name = "push_api-server_image",
    format = "Docker",
    image = ":api-server_image",
    # Need to login with docker first
    # aws ecr-public get-login-password --region us-east-1 |\
    #     docker login --username AWS --password-stdin public.ecr.aws/tricorder
    # aws ecr-public create-repository --repository-name api-server
    # Use bazel run --define=REGISTRY=ghcr.io/tricorder-observability to set this value.
    registry = "$(REGISTRY)",
    repository = "api-server",
    # Use bazel run --define=TAG=v0.0.x to set this value.
    tag = "$(TAG)",
)
